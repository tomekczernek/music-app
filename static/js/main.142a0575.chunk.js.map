{"version":3,"sources":["api/index.js","utils/index.js","components/Header/Header.js","components/Songs/SongItem.js","components/Songs/SongsBox.js","components/Songs/ListItem.js","components/MessageBox/MessageBox.js","components/Dialog/SaveDialog.js","components/Dialog/SavedListDialog.js","App.js","reportWebVitals.js","index.js"],"names":["get","q","axios","method","url","process","params","headers","mapItem","data","map","item","id","title","artist","name","album","albumImage","cover_small","Header","onToggleDark","showSavedList","userSavedLists","classes","makeStyles","theme","root","flexGrow","icon","marginRight","useStyles","className","AppBar","position","color","Container","maxWidth","Toolbar","Typography","variant","IconButton","aria-label","onClick","Badge","badgeContent","length","LibraryMusic","BrightnessMediumOutlined","SongItem","handleAction","whichList","Icon","border","boxShadow","Card","CardHeader","avatar","Avatar","alt","src","action","subheader","SongsBox","songsData","maxHeight","overflowY","ListItem","listName","createDate","fontSize","Divider","MessageBox","messageBoxOpen","message","messageBoxClose","width","margin","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","open","onClose","size","SaveDialog","openSaveDialog","closeSaveDialog","saveList","useState","setListName","button","Dialog","aria-labelledby","fullWidth","DialogTitle","DialogContent","DialogContentText","TextField","label","onChange","event","target","value","DialogActions","Button","SavedListDialog","openSavedListDialog","closeSavedListDialog","App","palette","type","setTheme","muiTheme","createMuiTheme","artistName","setArtistName","setSongsData","setMessageBoxOpen","messageBoxText","setMessageBoxText","userList","setUserList","setOpenSaveDialog","setOpenSavedListDialog","setUserSavedLists","openLoader","setOpenLoader","marginTop","songsPaper","padding","marginBottom","listPaper","searchBox","height","searchInput","listTitle","saveBtn","newPaletteType","Grid","container","xs","sm","md","lg","Paper","elevation","preventDefault","api","then","response","error","mapData","catch","LinearProgress","some","newTrackList","filter","Date","toLocaleString","replace","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.142a0575.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nfunction get(q) {\r\n  return axios({\r\n    method: \"GET\",\r\n    url: process.env.REACT_APP_URL,\r\n    params: {\r\n        \"q\": q\r\n    },\r\n    headers: {\r\n        \"x-rapidapi-key\": process.env.REACT_APP_KEY,\r\n        \"x-rapidapi-host\": process.env.REACT_APP_HOST,\r\n        \"useQueryString\": true\r\n    }\r\n  });\r\n}\r\n\r\nexport default { get };\r\n","function mapItem(data) {\r\n  const mapData = data.map((item) => ({\r\n    id: item.id,\r\n    title: item.title,\r\n    artist: item.artist.name,\r\n    album: item.album.title,\r\n    albumImage: item.album.cover_small,\r\n  }));\r\n  return mapData;\r\n}\r\n\r\nexport { mapItem };\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Container,\r\n  IconButton,\r\n  Badge\r\n} from \"@material-ui/core\";\r\nimport { LibraryMusic, BrightnessMediumOutlined } from \"@material-ui/icons\";\r\n\r\nfunction Header({ onToggleDark, showSavedList, userSavedLists }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    icon: {\r\n      marginRight: 10,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"fixed\" color=\"default\">\r\n        <Container maxWidth=\"lg\">\r\n          <Toolbar>\r\n            <Typography variant=\"h5\" className={classes.title}>\r\n              musicApp\r\n            </Typography>\r\n            <IconButton\r\n              className={classes.icon}\r\n              aria-label=\"add\"\r\n              color=\"default\"\r\n              onClick={showSavedList}\r\n            >\r\n              <Badge badgeContent={userSavedLists.length} color=\"secondary\">\r\n                <LibraryMusic />\r\n              </Badge>\r\n            </IconButton>\r\n\r\n            <IconButton aria-label=\"add\" color=\"default\" onClick={onToggleDark}>\r\n              <BrightnessMediumOutlined />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardHeader, Avatar, IconButton } from \"@material-ui/core\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nfunction SongItem({\r\n  title,\r\n  id,\r\n  artist,\r\n  album,\r\n  albumImage,\r\n  handleAction,\r\n  whichList,\r\n}) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      border: \"none\",\r\n      boxShadow: \"none\",\r\n    },\r\n    icon: {\r\n      marginRight: 15,\r\n      '@media (max-width: 600px)' : {\r\n        marginRight: 0\r\n      }\r\n    },\r\n  }));\r\n\r\n  function Icon() {\r\n    if (whichList === \"songs\") {\r\n      return <AddIcon />;\r\n    }\r\n    return <RemoveIcon />;\r\n  }\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        avatar={\r\n          <Avatar aria-label=\"recipe\">\r\n            <img alt={`image-${artist}`} src={albumImage} />\r\n          </Avatar>\r\n        }\r\n        action={\r\n          <IconButton\r\n            className={classes.icon}\r\n            aria-label=\"add\"\r\n            onClick={handleAction({\r\n              title: title,\r\n              id: id,\r\n              artist: artist,\r\n              album: album,\r\n              albumImage: albumImage,\r\n            })}\r\n          >\r\n            <Icon />\r\n          </IconButton>\r\n        }\r\n        title={title}\r\n        subheader={`${artist} | ${album}`}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default SongItem;\r\n","import SongItem from \"./SongItem\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction SongsBox({ songsData, handleAction, whichList }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      maxHeight: \"calc(100vh - 16rem)\",\r\n      overflowY: \"auto\",\r\n      \"@media (max-width: 600px)\": {\r\n        maxHeight: \"50vh\"\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {songsData.map((item) => (\r\n        <SongItem\r\n          key={item.id}\r\n          id={item.id}\r\n          title={item.title}\r\n          artist={item.artist}\r\n          album={item.album}\r\n          albumImage={item.albumImage}\r\n          handleAction={handleAction}\r\n          whichList={whichList}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongsBox;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardHeader, Divider } from \"@material-ui/core\";\r\n\r\nfunction ListItem({ listName, createDate }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      border: \"none\",\r\n      boxShadow: \"none\",\r\n    },\r\n    item: {\r\n      fontSize: \"1rem\",\r\n      \"& :nth-child(2)\": {\r\n        fontSize: \"0.75rem\",\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        className={classes.item}\r\n        title={listName}\r\n        subheader={`Create date: ${createDate}`}\r\n      />\r\n      <Divider />\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ListItem;\r\n","import { Fragment } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nfunction MessageBox({ messageBoxOpen, message, messageBoxClose }) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: \"90%\",\r\n      maxWidth: \"500px\",\r\n      margin: \"0 auto\",\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Snackbar\r\n      className={classes.root}\r\n      anchorOrigin={{\r\n        vertical: \"bottom\",\r\n        horizontal: \"center\",\r\n      }}\r\n      autoHideDuration={5000}\r\n      open={messageBoxOpen}\r\n      message={message}\r\n      onClose={messageBoxClose}\r\n      action={\r\n        <Fragment>\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-label=\"close\"\r\n            color=\"inherit\"\r\n            onClick={messageBoxClose}\r\n          >\r\n            <CloseIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Fragment>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default MessageBox;\r\n","import { useState } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\n\r\nfunction SaveDialog({ openSaveDialog, closeSaveDialog, saveList }) {\r\n  const [listName, setListName] = useState(\"\");\r\n\r\n  const handleListTitle = (event) => {\r\n    setListName(event.target.value);\r\n  };\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      margin: \"1rem\",\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={openSaveDialog}\r\n        onClose={closeSaveDialog}\r\n        aria-labelledby=\"form-dialog-title\"\r\n        maxWidth=\"sm\"\r\n        id=\"saveDialog\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Create list</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>Enter name of the track list.</DialogContentText>\r\n          <TextField\r\n            margin=\"dense\"\r\n            label=\"List name\"\r\n            fullWidth\r\n            onChange={handleListTitle}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            className={classes.button}\r\n            onClick={closeSaveDialog}\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            className={classes.button}\r\n            onClick={saveList({ listName: listName })}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SaveDialog;\r\n","import { ListItem } from '../Songs';\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@material-ui/core\";\r\n\r\nfunction SavedListDialog({\r\n  openSavedListDialog,\r\n  closeSavedListDialog,\r\n  userSavedLists,\r\n}) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      margin: \"1rem\",\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={openSavedListDialog}\r\n        onClose={closeSavedListDialog}\r\n        aria-labelledby=\"form-dialog-title\"\r\n        maxWidth=\"sm\"\r\n        id=\"savedListDialog\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Your lists</DialogTitle>\r\n        <DialogContent>\r\n          {userSavedLists.length ? (\r\n            userSavedLists.map(item => (\r\n              <ListItem key={item.createDate} listName={item.listName} createDate={item.createDate} />\r\n            ))\r\n          ) : (\r\n            <p>You don't have any saved lists yet.</p>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            className={classes.button}\r\n            onClick={closeSavedListDialog}\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SavedListDialog;\r\n","import { useState, Fragment } from \"react\";\n\nimport api from \"./api\";\n\nimport data from \"./api/data.json\";\nimport { mapItem } from \"./utils/index\";\n\nimport Header from \"./components/Header\";\nimport SongsBox from \"./components/Songs\";\nimport MessageBox from \"./components/MessageBox\";\nimport SaveDialog from \"./components/Dialog\";\nimport { SavedListDialog } from \"./components/Dialog\";\n\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Paper,\n  Grid,\n  Container,\n  TextField,\n  IconButton,\n  Divider,\n  Button,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nfunction App() {\n  const [theme, setTheme] = useState({\n    palette: {\n      type: \"dark\",\n    },\n  });\n\n  const handleChangeTheme = () => {\n    let newPaletteType = theme.palette.type === \"light\" ? \"dark\" : \"light\";\n    setTheme({\n      palette: {\n        type: newPaletteType,\n      },\n    });\n  };\n\n  const muiTheme = createMuiTheme(theme);\n\n  const [artistName, setArtistName] = useState(\"\");\n  const [songsData, setSongsData] = useState([]);\n  const [messageBoxOpen, setMessageBoxOpen] = useState(false);\n  const [messageBoxText, setMessageBoxText] = useState(\"\");\n  const [userList, setUserList] = useState([]);\n  const [openSaveDialog, setOpenSaveDialog] = useState(false);\n  const [openSavedListDialog, setOpenSavedListDialog] = useState(false);\n  const [userSavedLists, setUserSavedLists] = useState([]);\n  const [openLoader, setOpenLoader] = useState(false);\n\n  const handleInputSearch = (event) => {\n    setArtistName(event.target.value);\n  };\n\n  const handleBtnSearch = (event) => {\n    event.preventDefault();\n    if (artistName) {\n      setOpenLoader(true);\n      api.get(artistName).then((response) => {\n        if (response.data.error) {\n          setMessageBoxText(`Query error: ${response.data.error.message}`);\n          setMessageBoxOpen(true);\n          const mapData = mapItem(data);\n          setSongsData(mapData);\n          setOpenLoader(false);\n        } else {\n          const mapData = mapItem(response.data.data);\n          setSongsData(mapData);\n          setOpenLoader(false);\n        }\n      }).catch((error) => {\n        setMessageBoxText(`${error}`);\n        setMessageBoxOpen(true);\n      });\n    } else {\n      setMessageBoxText(\"Enter value\");\n      setMessageBoxOpen(true);\n    }\n  };\n\n  const handleMessageBoxClose = () => {\n    setMessageBoxOpen(false);\n  };\n\n  const handleCloseSaveDialog = () => {\n    setOpenSaveDialog(false);\n  };\n\n  const handleCloseSavedListDialog = () => {\n    setOpenSavedListDialog(false);\n  };\n\n  const addToList = (params) => (event) => {\n    if (userList.length === 5) {\n      setMessageBoxText(\"You have the maximum number of songs in the list (5)\");\n      setMessageBoxOpen(true);\n    } else if (userList.some((item) => item.id === params.id)) {\n      setMessageBoxText(\"You already have this track on your list\");\n      setMessageBoxOpen(true);\n    } else {\n      setUserList([...userList, params]);\n    }\n  };\n\n  const removeFromList = (params) => (event) => {\n    const newTrackList = userList.filter((item) => item.id !== params.id);\n    setUserList(newTrackList);\n  };\n\n  const handleSaveBtn = (event) => {\n    event.preventDefault();\n    setOpenSaveDialog(true);\n  };\n\n  const saveList = (params) => (event) => {\n    if (params.listName) {\n      const createDate = new Date().toLocaleString().replace(/,/g, '');\n      setOpenSaveDialog(false);\n      setUserList([]);\n      setUserSavedLists([...userSavedLists, {listName:params.listName, createDate:createDate}]);\n      setMessageBoxText(\"Track list was saved\");\n      setMessageBoxOpen(true);\n    } else {\n      setMessageBoxText(\"Enter your track list name\");\n      setMessageBoxOpen(true);\n    }\n  };\n\n  const showSavedList = () => {\n    setOpenSavedListDialog(true);\n  };\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      margin: 0,\n      marginTop: \"4rem\",\n    },\n    songsPaper: {\n      padding: \"2rem\",\n      margin: \"1rem\",\n      \"@media (max-width: 600px)\": {\n        padding: \"1rem\",\n        margin: 0,\n        marginBottom: \"1rem\",\n      },\n    },\n    listPaper: {\n      padding: \"2rem\",\n      margin: \"1rem\",\n      \"@media (max-width: 600px)\": {\n        padding: \"1rem\",\n        margin: 0,\n      },\n    },\n    searchBox: {\n      height: \"5rem\",\n    },\n    searchInput: {\n      width: \"calc(100% - 59px)\",\n    },\n    listTitle: {\n      fontSize: \"1.1rem\",\n      padding: 11,\n    },\n    saveBtn: {\n      marginTop: 20\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <MuiThemeProvider theme={muiTheme}>\n      <Header\n        onToggleDark={handleChangeTheme}\n        showSavedList={showSavedList}\n        userSavedLists={userSavedLists}\n      />\n      <Container maxWidth=\"lg\">\n        <Grid container className={classes.root}>\n          <Grid item xs={12} sm={12} md={7} lg={8}>\n            <Paper elevation={4} className={classes.songsPaper}>\n              <div className={classes.searchBox}>\n                <TextField\n                  className={classes.searchInput}\n                  label=\"Enter artist\"\n                  value={artistName}\n                  onChange={handleInputSearch}\n                />\n                <IconButton\n                  color=\"secondary\"\n                  aria-label=\"search\"\n                  onClick={handleBtnSearch}\n                >\n                  <SearchIcon fontSize=\"large\" />\n                </IconButton>\n              </div>\n              {openLoader ? (\n                <LinearProgress color=\"secondary\" />\n              ) : (\n                <SongsBox\n                  songsData={songsData}\n                  handleAction={addToList}\n                  whichList=\"songs\"\n                />\n              )}\n            </Paper>\n          </Grid>\n          <Grid item xs={12} sm={12} md={5} lg={4}>\n            <Paper elevation={4} className={classes.listPaper}>\n              <p className={classes.listTitle}>Create your own track list</p>\n              {userList.length ? <Divider /> : null}\n              <SongsBox\n                songsData={userList}\n                handleAction={removeFromList}\n                whichList=\"user\"\n              />\n              {userList.length ? (\n                <Fragment>\n                  <Divider />\n                  <Button\n                    className={classes.saveBtn}\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={handleSaveBtn}\n                  >\n                    Save list\n                  </Button>\n                </Fragment>\n              ) : null}\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n      <MessageBox\n        messageBoxOpen={messageBoxOpen}\n        message={messageBoxText}\n        messageBoxClose={handleMessageBoxClose}\n      />\n      <SaveDialog\n        openSaveDialog={openSaveDialog}\n        closeSaveDialog={handleCloseSaveDialog}\n        saveList={saveList}\n      />\n      <SavedListDialog\n        openSavedListDialog={openSavedListDialog}\n        closeSavedListDialog={handleCloseSavedListDialog}\n        userSavedLists={userSavedLists}\n      />\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}